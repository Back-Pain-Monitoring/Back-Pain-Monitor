{"version":3,"sources":["./src/app/symptoms-page/symptoms-page.module.ts","./src/app/symptoms-page/symptoms-page.page.html","./src/app/symptoms-page/symptoms-page.page.ts","./src/app/symptoms-page/symptoms-page-routing.module.ts","./src/app/symptoms-page/symptoms-page.page.scss"],"names":[],"mappings":"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","file":"symptoms-page-symptoms-page-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SymptomsPagePageRoutingModule } from './symptoms-page-routing.module';\n\nimport { SymptomsPagePage } from './symptoms-page.page';\n\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SymptomsPagePageRoutingModule\n  ],\n  declarations: [SymptomsPagePage]\n})\nexport class SymptomsPagePageModule { }\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Symptoms</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list>\\n    <ion-item>\\n      <ion-label>Pain Intensity</ion-label>\\n      <ion-label>{{intensityTitle}}</ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-range min=\\\"0\\\" max=\\\"10\\\" step=\\\"1\\\" snaps=\\\"true\\\" pin=\\\"true\\\" [ngModel]=\\\"intensity\\\"\\n        (ngModelChange)=\\\"onIntensityChange($event)\\\">\\n      </ion-range>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label class=\\\"ion-text-wrap\\\">{{intensityDescription}}</ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Pain type</ion-label>\\n      <ion-select [(ngModel)]=\\\"painType\\\">\\n        <ion-select-option value=\\\"none\\\">None</ion-select-option>\\n        <ion-select-option value=\\\"aching\\\">Aching</ion-select-option>\\n        <ion-select-option value=\\\"burning\\\">Burning</ion-select-option>\\n        <ion-select-option value=\\\"cramping\\\">Cramping</ion-select-option>\\n        <ion-select-option value=\\\"numbness\\\">Numbness</ion-select-option>\\n        <ion-select-option value=\\\"radiating\\\">Radiating</ion-select-option>\\n        <ion-select-option value=\\\"shooting\\\">Shooting</ion-select-option>\\n        <ion-select-option value=\\\"stabbing\\\">Stabbing</ion-select-option>\\n        <ion-select-option value=\\\"tingling\\\">Tingling</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Have you had this pain before?</ion-label>\\n      <ion-checkbox [(ngModel)]=\\\"painBefore\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item *ngIf=\\\"painBefore\\\">\\n      <ion-label>How many times before?</ion-label>\\n      <ion-input type=\\\"number\\\" [(ngModel)]=\\\"timesBefore\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Does the pain keep you up at night?</ion-label>\\n      <ion-checkbox [(ngModel)]=\\\"nightPain\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>What makes the pain worse?</ion-label>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"worse\\\">\\n        <ion-select-option *ngFor=\\\"let activity of dataService.activities\\\">{{activity}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>What makes the pain better?</ion-label>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"better\\\">\\n        <ion-select-option *ngFor=\\\"let activity of dataService.activities\\\">{{activity}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Cause of pain</ion-label>\\n      <ion-input type=\\\"text\\\" value=\\\"unknown\\\" [(ngModel)]=\\\"cause\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>When do you feel pain?</ion-label>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"mobility\\\">\\n        <ion-select-option value=\\\"moving\\\">Moving</ion-select-option>\\n        <ion-select-option value=\\\"resting\\\">Resting</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Is the pain constant or intermittent?</ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-radio-group [(ngModel)]=\\\"is_constant\\\">\\n        <ion-item>\\n          <ion-label>Constant</ion-label>\\n          <ion-radio slot=\\\"start\\\" value=\\\"true\\\"></ion-radio>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Intermittent</ion-label>\\n          <ion-radio slot=\\\"start\\\" value=\\\"false\\\"></ion-radio>\\n        </ion-item>\\n      </ion-radio-group>\\n    </ion-item>\\n  </ion-list>\\n\\n  <!--Back button to bodymap page-->\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"start\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button color=\\\"success\\\" routerDirection=\\\"back\\\" routerLink=\\\"/bodymap\\\" (click)=\\\"updateLog()\\\">\\n      <ion-icon name=\\\"arrow-back-circle-outline\\\" color=\\\"dark\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n\\n  <!--Forward Button to redflags page-->\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\">\\n    <ion-fab-button color=\\\"success\\\" routerDirection=\\\"forward\\\" routerLink=\\\"/redflags\\\" (click)=\\\"updateLog()\\\">\\n      <ion-icon name=\\\"arrow-forward-circle-outline\\\" color=\\\"dark\\\"></ion-icon>\\n    </ion-fab-button>\\n  </ion-fab>\\n\\n\\n\\n</ion-content>\";","import { Component, OnInit } from '@angular/core';\n\nimport { LogDataService } from '../services/log-data.service';\n\n@Component({\n  selector: 'app-symptoms-page',\n  templateUrl: './symptoms-page.page.html',\n  styleUrls: ['./symptoms-page.page.scss'],\n})\nexport class SymptomsPagePage implements OnInit {\n\n  // pain scale from https://www.reddit.com/r/ChronicPain/comments/5ouyu4/pain_scale_for_people_in_chronic_pain/\n  private intensityInfo = {\n    0: [\"No pain\", \"I have no pain.\"],\n    1: [\"Minimal\", \"My pain is hardly noticable.\"],\n    2: [\"Mild\", \"I have a low level of pain. I am aware of my pain only when I pay attention to it.\"],\n    3: [\"Uncomfortable\", \"My pain bothers me but I can ignore it most of the time\"],\n    4: [\"Moderate\", \"I am constantly aware of my pain but I can continue most activities\"],\n    5: [\"Distracting\", \"I think about my pain most of the time. I cannot do some of the activities I need to do each day because of the pain.\"],\n    6: [\"Distressing\", \"I think about my pain all of the time. I give up many activities because of my pain.\"],\n    7: [\"Unmanagable\", \"I am in pain most of the time. It keeps me from doing most activities.\"],\n    8: [\"Intense\", \"My pain is so severe that it is hard to think of anything else. Talking and listening are difficult.\"],\n    9: [\"Severe\", \"My pain is all that I can think about. I can barely talk or move because of the pain.\"],\n    10: [\"Unable to move\", \"I am in bed and can't move due to my pain. I need someone to take me to the emergency room to get help for my pain.\"],\n  }\n\n  intensity: number;\n  painType: string;\n  painBefore: boolean = false;\n  timesBefore: number;\n  nightPain: boolean = false;\n  worse: Array<string> = [];\n  better: Array<string> = [];\n  cause: string;\n  is_constant: \"true\" | \"false\";  // TODO: there's got to be a better way to do this than this awkward string/boolean conversion\n  mobility: string[];\n  intensityTitle: string = this.intensityInfo[0][0];\n  intensityDescription: string = this.intensityInfo[0][1];\n\n  constructor(public dataService: LogDataService) {\n  }\n\n  ngOnInit() {\n    this.updateUIFromLog();\n  }\n\n  private onIntensityChange(newIntensity) {\n    if (!(newIntensity in this.intensityInfo)) {\n      newIntensity = 0;\n    }\n    this.intensity = newIntensity;\n    this.intensityTitle = this.intensityInfo[newIntensity][0];\n    this.intensityDescription = this.intensityInfo[newIntensity][1];\n  }\n\n  updateLog() {\n    this.dataService.currentLogIntensity = this.intensity;\n    this.dataService.currentLogType = this.painType;\n    this.dataService.currentLogTimesBefore = this.painBefore ? this.timesBefore : 0;\n    this.dataService.currentLogNightPain = this.nightPain;\n    this.dataService.currentLogWorse = this.worse;\n    this.dataService.currentLogBetter = this.better;\n    this.dataService.currentLogMobility = this.mobility;\n    this.dataService.currentLogCause = this.cause;\n    this.dataService.currentLogIs_constant = this.is_constant === \"true\";\n    console.log(\"updated log\");\n    this.dataService.printLogEntry();\n  }\n\n  updateUIFromLog() {\n    console.log(\"updating UI from dataservice\");\n    this.dataService.printLogEntry();\n    if (this.dataService.currentLogIntensity !== undefined) {\n      this.onIntensityChange(this.dataService.currentLogIntensity);\n    }\n    this.painType = this.dataService.currentLogType;\n    this.painBefore = this.dataService.currentLogTimesBefore > 0;\n    this.timesBefore = this.dataService.currentLogTimesBefore;\n    this.nightPain = this.dataService.currentLogNightPain;\n    this.worse = this.dataService.currentLogWorse;\n    this.better = this.dataService.currentLogBetter;\n    this.mobility = this.dataService.currentLogMobility;\n    this.cause = this.dataService.currentLogCause;\n    this.is_constant = this.dataService.currentLogIs_constant ? \"true\" : \"false\";\n  }\n\n  // look at the UI to see the changes were made appropriately. Can trigger this function by attaching it to a button.\n  testDataBinding() {\n    this.intensity = 10;\n    this.painType = \"numbness\";\n    this.cause = \"backpack\";\n    this.mobility = [\"moving\", \"resting\"];\n    this.is_constant = \"true\";\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SymptomsPagePage } from './symptoms-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SymptomsPagePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SymptomsPagePageRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N5bXB0b21zLXBhZ2Uvc3ltcHRvbXMtcGFnZS5wYWdlLnNjc3MifQ== */\";"],"sourceRoot":"webpack:///"}