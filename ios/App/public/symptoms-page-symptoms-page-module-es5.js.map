{"version":3,"sources":["webpack:///src/app/symptoms-page/symptoms-page.module.ts","webpack:///src/app/symptoms-page/symptoms-page.page.html","webpack:///src/app/symptoms-page/symptoms-page.page.ts","webpack:///src/app/symptoms-page/symptoms-page-routing.module.ts","webpack:///src/app/symptoms-page/symptoms-page.page.scss"],"names":["SymptomsPagePageModule","imports","declarations","SymptomsPagePage","dataService","intensityInfo","painBefore","nightPain","worse","better","intensityTitle","intensityDescription","updateUIFromLog","newIntensity","intensity","currentLogIntensity","currentLogType","painType","currentLogTimesBefore","timesBefore","currentLogNightPain","currentLogWorse","currentLogBetter","currentLogMobility","mobility","currentLogCause","cause","currentLogIs_constant","is_constant","updateIsEntered","undefined","onIntensityChange","selector","template","routes","path","component","SymptomsPagePageRoutingModule","forChild","exports"],"mappings":"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","file":"symptoms-page-symptoms-page-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SymptomsPagePageRoutingModule } from './symptoms-page-routing.module';\n\nimport { SymptomsPagePage } from './symptoms-page.page';\n\nimport { LogNavButtonComponent } from '../components/log-nav-button/log-nav-button.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SymptomsPagePageRoutingModule\n  ],\n  declarations: [SymptomsPagePage, LogNavButtonComponent]\n})\nexport class SymptomsPagePageModule { }\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-title>Symptoms</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-list>\\n    <ion-item>\\n      <ion-label>Pain Intensity</ion-label>\\n      <ion-label>{{intensityTitle}}</ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-range min=\\\"0\\\" max=\\\"10\\\" step=\\\"1\\\" snaps=\\\"true\\\" pin=\\\"true\\\" [ngModel]=\\\"intensity\\\"\\n        (ngModelChange)=\\\"onIntensityChange($event)\\\">\\n      </ion-range>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label class=\\\"ion-text-wrap\\\">{{intensityDescription}}</ion-label>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Pain type</ion-label>\\n      <ion-icon class=\\\"required-icon\\\" name=\\\"alert-circle-outline\\\" *ngIf=\\\"painType === undefined\\\" color=\\\"danger\\\">\\n      </ion-icon>\\n      <ion-select [(ngModel)]=\\\"painType\\\">\\n        <ion-select-option value=\\\"none\\\">None</ion-select-option>\\n        <ion-select-option value=\\\"aching\\\">Aching</ion-select-option>\\n        <ion-select-option value=\\\"burning\\\">Burning</ion-select-option>\\n        <ion-select-option value=\\\"cramping\\\">Cramping</ion-select-option>\\n        <ion-select-option value=\\\"numbness\\\">Numbness</ion-select-option>\\n        <ion-select-option value=\\\"radiating\\\">Radiating</ion-select-option>\\n        <ion-select-option value=\\\"shooting\\\">Shooting</ion-select-option>\\n        <ion-select-option value=\\\"stabbing\\\">Stabbing</ion-select-option>\\n        <ion-select-option value=\\\"tingling\\\">Tingling</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Have you had this pain before?</ion-label>\\n      <ion-checkbox [(ngModel)]=\\\"painBefore\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item *ngIf=\\\"painBefore\\\">\\n      <ion-label>How many times before?</ion-label>\\n      <ion-icon class=\\\"required-icon\\\" name=\\\"alert-circle-outline\\\" *ngIf=\\\"timesBefore === undefined || timesBefore < 1\\\"\\n        color=\\\"danger\\\">\\n      </ion-icon>\\n      <ion-input type=\\\"number\\\" [(ngModel)]=\\\"timesBefore\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Does the pain keep you up at night?</ion-label>\\n      <ion-checkbox [(ngModel)]=\\\"nightPain\\\"></ion-checkbox>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>What makes the pain worse?</ion-label>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"worse\\\">\\n        <ion-select-option *ngFor=\\\"let activity of dataService.activities\\\">{{activity}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>What makes the pain better?</ion-label>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"better\\\">\\n        <ion-select-option *ngFor=\\\"let activity of dataService.activities\\\">{{activity}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Cause of pain</ion-label>\\n      <ion-input type=\\\"text\\\" value=\\\"unknown\\\" [(ngModel)]=\\\"cause\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>When do you feel pain?</ion-label>\\n      <ion-icon class=\\\"required-icon\\\" name=\\\"alert-circle-outline\\\"\\n        *ngIf=\\\"mobility === undefined || mobility.length === 0\\\" color=\\\"danger\\\">\\n      </ion-icon>\\n      <ion-select multiple=\\\"true\\\" [(ngModel)]=\\\"mobility\\\">\\n        <ion-select-option value=\\\"moving\\\">Moving</ion-select-option>\\n        <ion-select-option value=\\\"resting\\\">Resting</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Is the pain constant or intermittent?</ion-label>\\n      <ion-icon class=\\\"required-icon\\\" name=\\\"alert-circle-outline\\\" *ngIf=\\\"is_constant === undefined\\\" color=\\\"danger\\\">\\n      </ion-icon>\\n    </ion-item>\\n    <ion-item>\\n      <ion-radio-group [(ngModel)]=\\\"is_constant\\\">\\n        <ion-item>\\n          <ion-label>Constant</ion-label>\\n          <ion-radio slot=\\\"start\\\" value=\\\"true\\\"></ion-radio>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>Intermittent</ion-label>\\n          <ion-radio slot=\\\"start\\\" value=\\\"false\\\"></ion-radio>\\n        </ion-item>\\n      </ion-radio-group>\\n    </ion-item>\\n  </ion-list>\\n\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"start\\\" slot=\\\"fixed\\\" (click)=\\\"updateLog()\\\">\\n    <app-log-nav-button direction=\\\"back\\\" link=\\\"/bodymap\\\"></app-log-nav-button>\\n  </ion-fab>\\n\\n  <ion-fab vertical=\\\"bottom\\\" horizontal=\\\"end\\\" slot=\\\"fixed\\\" (click)=\\\"updateLog()\\\">\\n    <app-log-nav-button direction=\\\"forward\\\" link=\\\"/redflags\\\">\\n    </app-log-nav-button>\\n  </ion-fab>\\n</ion-content>\";","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\n\nimport { LogDataService } from '../services/log-data.service';\n\n@Component({\n  selector: 'app-symptoms-page',\n  templateUrl: './symptoms-page.page.html',\n  styleUrls: ['./symptoms-page.page.scss'],\n})\nexport class SymptomsPagePage implements OnInit {\n\n  // pain scale from https://www.reddit.com/r/ChronicPain/comments/5ouyu4/pain_scale_for_people_in_chronic_pain/\n  private intensityInfo = {\n    0: [\"No pain\", \"I have no pain.\"],\n    1: [\"Minimal\", \"My pain is hardly noticable.\"],\n    2: [\"Mild\", \"I have a low level of pain. I am aware of my pain only when I pay attention to it.\"],\n    3: [\"Uncomfortable\", \"My pain bothers me but I can ignore it most of the time\"],\n    4: [\"Moderate\", \"I am constantly aware of my pain but I can continue most activities\"],\n    5: [\"Distracting\", \"I think about my pain most of the time. I cannot do some of the activities I need to do each day because of the pain.\"],\n    6: [\"Distressing\", \"I think about my pain all of the time. I give up many activities because of my pain.\"],\n    7: [\"Unmanagable\", \"I am in pain most of the time. It keeps me from doing most activities.\"],\n    8: [\"Intense\", \"My pain is so severe that it is hard to think of anything else. Talking and listening are difficult.\"],\n    9: [\"Severe\", \"My pain is all that I can think about. I can barely talk or move because of the pain.\"],\n    10: [\"Unable to move\", \"I am in bed and can't move due to my pain. I need someone to take me to the emergency room to get help for my pain.\"],\n  }\n\n  intensity: number;\n  painType: string;\n  painBefore: boolean = false;\n  timesBefore: number;\n  nightPain: boolean = false;\n  worse: Array<string> = [];\n  better: Array<string> = [];\n  cause: string;\n  is_constant: \"true\" | \"false\";  // TODO: there's got to be a better way to do this than this awkward string/boolean conversion\n  mobility: string[];\n  intensityTitle: string = this.intensityInfo[0][0];\n  intensityDescription: string = this.intensityInfo[0][1];\n\n  constructor(public dataService: LogDataService) {\n  }\n\n  ngOnInit() {\n    this.updateUIFromLog();\n  }\n\n  private onIntensityChange(newIntensity) {\n    if (!(newIntensity in this.intensityInfo)) {\n      newIntensity = 0;\n    }\n    this.intensity = newIntensity;\n    this.intensityTitle = this.intensityInfo[newIntensity][0];\n    this.intensityDescription = this.intensityInfo[newIntensity][1];\n  }\n\n  updateLog() {\n    this.dataService.currentLogIntensity = this.intensity;\n    this.dataService.currentLogType = this.painType;\n    this.dataService.currentLogTimesBefore = this.painBefore ? this.timesBefore : 0;\n    this.dataService.currentLogNightPain = this.nightPain;\n    this.dataService.currentLogWorse = this.worse;\n    this.dataService.currentLogBetter = this.better;\n    this.dataService.currentLogMobility = this.mobility;\n    this.dataService.currentLogCause = this.cause;\n    this.dataService.currentLogIs_constant = this.is_constant === \"true\";\n    this.dataService.updateIsEntered(true);\n  }\n\n  updateUIFromLog() {\n    this.dataService.updateIsEntered(false);\n    if (this.dataService.currentLogIntensity !== undefined) {\n      this.onIntensityChange(this.dataService.currentLogIntensity);\n    } else {\n      this.onIntensityChange(0);\n    }\n    this.painType = this.dataService.currentLogType;\n    this.painBefore = this.dataService.currentLogTimesBefore > 0;\n    this.timesBefore = this.dataService.currentLogTimesBefore;\n    this.nightPain = this.dataService.currentLogNightPain;\n    this.worse = this.dataService.currentLogWorse;\n    this.better = this.dataService.currentLogBetter;\n    this.mobility = this.dataService.currentLogMobility;\n    this.cause = this.dataService.currentLogCause;\n    this.is_constant = this.dataService.currentLogIs_constant === false ? \"false\" : \"true\";\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SymptomsPagePage } from './symptoms-page.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SymptomsPagePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SymptomsPagePageRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N5bXB0b21zLXBhZ2Uvc3ltcHRvbXMtcGFnZS5wYWdlLnNjc3MifQ== */\";"]}